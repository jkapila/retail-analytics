[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Analytics Series",
    "section": "",
    "text": "Here we are doing a series on Data Analystics using a reatils data set taken from Kaggle.\nHere are the notebooks for two session done till now\n\nSession 1 : Customer Analysis using RFM models <Link here>\nSession 2 : Sales Analysis via Regression Models <Link here>\n\nA brief about the data is as follows"
  },
  {
    "objectID": "index.html#you-can-do-and-add-you-analysis-using-follwing-steps",
    "href": "index.html#you-can-do-and-add-you-analysis-using-follwing-steps",
    "title": "Data Analytics Series",
    "section": "You can do and add you analysis using follwing steps",
    "text": "You can do and add you analysis using follwing steps\nPre-requisite: You need to have a github account\nSteps:\n1. Use Cmd Shell to create a new python environment using conda or venv, and install relevnat packages for you analysis.\n2. Install nbdev. Make sure you use pip install --force-reinstall nbdev to install this.\n3. Clone this repository via git clone https://github.com/jkapila/retail-analytics.git\n4. Get in folder using cd retail-analytics\\nbs.\n5. Create a new branch with your name, like yourname-analysis.\n6. Open jupyter lab / notebook in folder and add notebook with a sequence identifier as XX_Name_of_Notebook.ipynb.\n7. Keep working in the notebook wiht all you analysis.\n8. After the work is finish run nbdev_prepare\n9. Git add, commit and push.\n10. Create a PR to add you analysis."
  },
  {
    "objectID": "index.html#analysis-and-queries",
    "href": "index.html#analysis-and-queries",
    "title": "Data Analytics Series",
    "section": "Analysis and Queries",
    "text": "Analysis and Queries\n\nTo use the analysis you can go through the notebook in cronological order if number XX\n\nFor any doubts please connect or refer documnetation on nbdev."
  },
  {
    "objectID": "rfm.html",
    "href": "rfm.html",
    "title": "Customer related Analysis for our data",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport squarify\nimport plotly.express as px\n\n\ndf=pd.read_csv(\"C:/Users/vipulchopra/EDA/Supermart_Dataset.csv\")\ndf.head()\n\n\n\n\n\n  \n    \n      \n      Order ID\n      Customer Name\n      Customer Id\n      Age\n      Gender\n      Category\n      Sub Category\n      Region\n      State\n      City\n      Order Date\n      Time\n      Payment Method\n      Sales\n      Quantity\n      Discount\n      Profit\n      Rating\n    \n  \n  \n    \n      0\n      OD1\n      Harish\n      13\n      53\n      Male\n      Oil & Masala\n      Masalas\n      North\n      Tamil Nadu\n      Vellore\n      2017-11-08\n      13:03:25\n      Cash\n      1254\n      7\n      0.12\n      401.28\n      8.0\n    \n    \n      1\n      OD2\n      Sudha\n      38\n      31\n      Female\n      Beverages\n      Health Drinks\n      South\n      Tamil Nadu\n      Krishnagiri\n      2017-11-08\n      12:09:46\n      Cash\n      749\n      14\n      0.18\n      149.80\n      1.0\n    \n    \n      2\n      OD3\n      Hussain\n      15\n      18\n      Male\n      Food Grains\n      Atta & Flour\n      West\n      Tamil Nadu\n      Perambalur\n      2017-06-12\n      14:14:10\n      Credit card\n      2360\n      22\n      0.21\n      165.20\n      1.0\n    \n    \n      3\n      OD4\n      Jackson\n      16\n      69\n      Male\n      Fruits & Veggies\n      Fresh Vegetables\n      South\n      Tamil Nadu\n      Dharmapuri\n      2016-10-11\n      09:22:01\n      Cash\n      896\n      13\n      0.25\n      89.60\n      8.0\n    \n    \n      4\n      OD5\n      Ridhesh\n      29\n      12\n      Male\n      Food Grains\n      Organic Staples\n      South\n      Tamil Nadu\n      Ooty\n      2016-10-11\n      17:01:25\n      Ewallet\n      2355\n      8\n      0.26\n      918.45\n      9.0\n    \n  \n\n\n\n\n\nDefining the RFM terminologies as:\n\nThe more recent they purchase, the more responsive the customers are i.e recent purchase = low recency value.\nThe more frequently the customers buy, the more engaged and satisfied they are i.e high frequency = high f value.\nThe more they spend, the higher their monetary value.\n\n\ndf['Unit Sale Price']=round(df['Sales']/df['Quantity'],2)\ndf[\"Order Date\"]=pd.to_datetime(df[\"Order Date\"])\n\n\n\nCalculating the Recency , considering the last date of “Order Date” as reference\n\nRecency = pd.DataFrame(df.groupby('Customer Id')['Order Date'].max().reset_index())\nRecency['Recency'] = (Recency['Order Date'].max() - Recency['Order Date']).dt.days + 1\nRecency.head()\n\n\n\n\n\n  \n    \n      \n      Customer Id\n      Order Date\n      Recency\n    \n  \n  \n    \n      0\n      1\n      2018-12-23\n      8\n    \n    \n      1\n      2\n      2018-12-29\n      2\n    \n    \n      2\n      3\n      2018-12-28\n      3\n    \n    \n      3\n      4\n      2018-12-24\n      7\n    \n    \n      4\n      5\n      2018-12-27\n      4\n    \n  \n\n\n\n\n\n\nCalculating the Frequency for every Customer Id\n\nFrequency = pd.DataFrame(df.groupby('Customer Id')['Order ID'].nunique(). reset_index())\nFrequency.columns= ['fCustomer Id', 'Frequency']\nFrequency.head()\n\n\n\n\n\n  \n    \n      \n      fCustomer Id\n      Frequency\n    \n  \n  \n    \n      0\n      1\n      205\n    \n    \n      1\n      2\n      187\n    \n    \n      2\n      3\n      196\n    \n    \n      3\n      4\n      198\n    \n    \n      4\n      5\n      227\n    \n  \n\n\n\n\n\n\nCalculating the MonetaryValue , by considering the profit received by a customer in the whole data tenure\n\nMonetaryValue = pd.DataFrame(df.groupby('Customer Id')['Profit'].sum(). reset_index())\nMonetaryValue.columns= ['mCustomer Id', 'MonetaryValue']\nMonetaryValue.head()\n\n\n\n\n\n  \n    \n      \n      mCustomer Id\n      MonetaryValue\n    \n  \n  \n    \n      0\n      1\n      78044.29\n    \n    \n      1\n      2\n      78439.05\n    \n    \n      2\n      3\n      82121.26\n    \n    \n      3\n      4\n      74410.23\n    \n    \n      4\n      5\n      80191.89\n    \n  \n\n\n\n\n\n\nConcating the Recency,Frequency, MonetaryValue for unique Customer\n\nrfm = pd.concat([Recency, Frequency, MonetaryValue], axis=1)\nrfm.drop(['fCustomer Id', 'mCustomer Id','Order Date'], axis=1, inplace= True)\nrfm.head()\n\n\n\n\n\n  \n    \n      \n      Customer Id\n      Recency\n      Frequency\n      MonetaryValue\n    \n  \n  \n    \n      0\n      1\n      8\n      205\n      78044.29\n    \n    \n      1\n      2\n      2\n      187\n      78439.05\n    \n    \n      2\n      3\n      3\n      196\n      82121.26\n    \n    \n      3\n      4\n      7\n      198\n      74410.23\n    \n    \n      4\n      5\n      4\n      227\n      80191.89\n    \n  \n\n\n\n\n\n\nVisualization of RFM data per Customer Id\n\nplt.figure(figsize=(15.0,5.0))\nsns.barplot(data=rfm,x='Customer Id',y='Recency')\n\n<AxesSubplot:xlabel='Customer Id', ylabel='Recency'>\n\n\n\n\n\n\nplt.figure(figsize=(15.0,5.0))\nsns.barplot(data=rfm,x='Customer Id',y='Frequency')\n\n<AxesSubplot:xlabel='Customer Id', ylabel='Frequency'>\n\n\n\n\n\n\nplt.figure(figsize=(15.0,5.0))\nsns.barplot(data=rfm,x='Customer Id',y='MonetaryValue')\n\n<AxesSubplot:xlabel='Customer Id', ylabel='MonetaryValue'>\n\n\n\n\n\n\n\nRanking the Data, segmenting the data into 4 groups from 1 to 4\n\nr_labels = range(4, 0, -1);\nf_labels = range(1, 5);\nm_labels = range(1, 5)\n\nr_groups = pd.qcut(rfm['Recency'].rank(method='first'), q=4, labels=r_labels)\nf_groups = pd.qcut(rfm['Frequency'].rank(method='first'), q=4, labels=f_labels)\nm_groups = pd.qcut(rfm['MonetaryValue'].rank(method='first'), q=4, labels=m_labels)\n\n# Create new columns for R.F.M\nrfm_seg = rfm.assign(R = r_groups.values, F = f_groups.values,  M = m_groups.values)\n\n# concatenate RFM quartile values\nrfm_seg['RfmSegment'] = rfm_seg['R'].astype(str) + rfm_seg['F'].astype(str) + rfm_seg['M'].astype(str)\n\n\n\nCategorization of labels are as below:\n\nChampions : Bought recently, buy often and spend the most!\nLoyal Customers : Spend good money with us often.\nPotential Loyalist : Recent customers, but spent a good amount and bought more than once.\nRecent Customers : Bought most recently, but not often.\nPromising : Recent shoppers, but haven’t spent much.\nCustomers Needing Attention : Above average recency, frequency and monetary values.\nCan’t Lose Them : Made biggest purchases, and often. But haven’t returned for a long time. Need to bring them back!\nHibernating : Last purchase was long back, low spenders and bought seldomly. Will lose them if not reactivated.\nLost : Lowest recency, frequency and monetary scores (RFM score).\n\n\n# define users rfm category, using the RfmSegment column\n# logic is defined by business usually but here taking randomly\ndef users_cat(seg):\n      if seg['RfmSegment'] == '444':\n        return 'Champions'\n\n      elif seg['RfmSegment'] == '111':\n        return 'Lost'\n\n      else:\n        if seg['M'] == 4 & seg['F'] == 4: \n              return 'Loyal Customers'\n\n        if  seg['M'] == 4 & seg['F'] >= 3 & seg['R'] == 1:\n              return 'Cant Lose Them'\n\n        if seg['R'] >= 3 & seg['F'] <= 2:\n              return 'Recent Customers'\n\n        if seg['R'] >= 3 & seg['M'] <= 2:\n              return 'Promising'\n\n        if seg['R'] >= 3 & seg['M'] >= 3 & seg['F'] >= 1 | seg['F'] <= 2:\n              return 'Potential Loyalist'\n\n        if seg['R'] >=2 & seg['M'] >= 2 & seg['F'] >= 2:\n              return 'Customers Needing Attention'\n\n        return 'Hibernating'\n\nrfm_seg['RfmCat'] = rfm_seg.apply(users_cat, axis=1)\nrfm_seg.sample(5)\n\n\n\n\n\n  \n    \n      \n      Customer Id\n      Recency\n      Frequency\n      MonetaryValue\n      R\n      F\n      M\n      RfmSegment\n      RfmCat\n    \n  \n  \n    \n      1\n      2\n      2\n      187\n      78439.05\n      4\n      1\n      4\n      414\n      Recent Customers\n    \n    \n      11\n      12\n      3\n      174\n      64037.35\n      3\n      1\n      1\n      311\n      Recent Customers\n    \n    \n      18\n      19\n      9\n      206\n      76165.17\n      1\n      4\n      3\n      143\n      Recent Customers\n    \n    \n      40\n      41\n      2\n      209\n      80996.85\n      4\n      4\n      4\n      444\n      Champions\n    \n    \n      25\n      26\n      6\n      197\n      66970.60\n      2\n      2\n      1\n      221\n      Recent Customers\n    \n  \n\n\n\n\n\n# calculate the recency, frequency and monetary value mean, to see each category contribution\nrfm_agg = rfm_seg.groupby(['RfmCat']).agg({'Recency': 'mean',\n                                            'Frequency': 'mean',\n                                            'MonetaryValue': ['mean', 'count']}).round(0)\nrfm_agg.columns = rfm_agg.columns.droplevel()\n\nrfm_agg.columns =['Recency mean', 'Frequency mean', 'MonetaryValue mean', 'counts']\nrfm_agg['Percent'] = round((rfm_agg['counts']/ rfm_agg.counts.sum()) *100, 2)\nrfm_agg = rfm_agg.reset_index()\nrfm_agg\n\n\n\n\n\n  \n    \n      \n      RfmCat\n      Recency mean\n      Frequency mean\n      MonetaryValue mean\n      counts\n      Percent\n    \n  \n  \n    \n      0\n      Champions\n      2.0\n      209.0\n      80997.0\n      1\n      2.0\n    \n    \n      1\n      Customers Needing Attention\n      3.0\n      203.0\n      76809.0\n      5\n      10.0\n    \n    \n      2\n      Hibernating\n      8.0\n      199.0\n      75339.0\n      5\n      10.0\n    \n    \n      3\n      Lost\n      10.0\n      185.0\n      69526.0\n      3\n      6.0\n    \n    \n      4\n      Loyal Customers\n      4.0\n      218.0\n      83055.0\n      6\n      12.0\n    \n    \n      5\n      Promising\n      6.0\n      202.0\n      74864.0\n      7\n      14.0\n    \n    \n      6\n      Recent Customers\n      4.0\n      195.0\n      72801.0\n      23\n      46.0\n    \n  \n\n\n\n\n\nfig = plt.gcf()\nax = fig.add_subplot()\nfig.set_size_inches(20, 15)\n\ncolors_dict = {'Hibernating':'yellow','Promising':'royalblue',\n               'Lost':'red', 'Champions':'green', 'Loyal Customers':'gold', 'Customers Needing Attention':'grey', 'Recent Customers': 'purple'}\n\nsquarify.plot(sizes = rfm_agg['counts'],\n              text_kwargs = {'fontsize':16,'weight':'bold', 'fontname':'sans serif'},\n              color=colors_dict.values(),\n              label=['{} \\n{:.0f} days \\n{:.0f} purchase \\n${:.0f} \\n{:.0f} customers ({}%)'.format(*rfm_agg.iloc[i])\n                      for i in range(0, len(rfm_agg))], alpha=0.9 )\n\n\nplt.title('Customers Segments Using RFMmethod', fontsize=14, fontweight = 'bold')\nplt.axis('off')\nplt.show()\n\n\n\n\n\n#Profit value mean per per category\n\nrfm_agg['Profit_per_category']=round(rfm_agg['MonetaryValue mean']/(rfm_agg['Recency mean']*rfm_agg['Frequency mean']))#rfm_agg['counts'])\nrfm_agg\n\n\n\n\n\n  \n    \n      \n      RfmCat\n      Recency mean\n      Frequency mean\n      MonetaryValue mean\n      counts\n      Percent\n      Profit_per_category\n    \n  \n  \n    \n      0\n      Champions\n      2.0\n      209.0\n      80997.0\n      1\n      2.0\n      194.0\n    \n    \n      1\n      Customers Needing Attention\n      3.0\n      203.0\n      76809.0\n      5\n      10.0\n      126.0\n    \n    \n      2\n      Hibernating\n      8.0\n      199.0\n      75339.0\n      5\n      10.0\n      47.0\n    \n    \n      3\n      Lost\n      10.0\n      185.0\n      69526.0\n      3\n      6.0\n      38.0\n    \n    \n      4\n      Loyal Customers\n      4.0\n      218.0\n      83055.0\n      6\n      12.0\n      95.0\n    \n    \n      5\n      Promising\n      6.0\n      202.0\n      74864.0\n      7\n      14.0\n      62.0\n    \n    \n      6\n      Recent Customers\n      4.0\n      195.0\n      72801.0\n      23\n      46.0\n      93.0\n    \n  \n\n\n\n\n\n\nChecking a business Scenario, whether is it profitable to move a lower segment customer into higher segment?\n\n#Considering the cost to convert  the same is per customer is 500.\n#taking conversion ratio as 20%\ncategory=[\"Champions\",\"Loyal Customers\",\"Recent Customers\",\"Promising\",\"Customers Needing Attention\",\"Hibernating\",\"Lost\"]\nt=[]\nfor i in range(1,len(category)):\n    for j in range(i):\n        t.append([category[i],category[j]])\nt\n\n[['Loyal Customers', 'Champions'],\n ['Recent Customers', 'Champions'],\n ['Recent Customers', 'Loyal Customers'],\n ['Promising', 'Champions'],\n ['Promising', 'Loyal Customers'],\n ['Promising', 'Recent Customers'],\n ['Customers Needing Attention', 'Champions'],\n ['Customers Needing Attention', 'Loyal Customers'],\n ['Customers Needing Attention', 'Recent Customers'],\n ['Customers Needing Attention', 'Promising'],\n ['Hibernating', 'Champions'],\n ['Hibernating', 'Loyal Customers'],\n ['Hibernating', 'Recent Customers'],\n ['Hibernating', 'Promising'],\n ['Hibernating', 'Customers Needing Attention'],\n ['Lost', 'Champions'],\n ['Lost', 'Loyal Customers'],\n ['Lost', 'Recent Customers'],\n ['Lost', 'Promising'],\n ['Lost', 'Customers Needing Attention'],\n ['Lost', 'Hibernating']]\n\n\n\nNet_Profit=[]\nfor i in t:\n    profit_conversion=list(rfm_agg[rfm_agg['RfmCat']==i[1]]['MonetaryValue mean'])[0]-list(rfm_agg[rfm_agg['RfmCat']==i[0]]['MonetaryValue mean'])[0]\n    Net_Profit.append(profit_conversion*0.2*list(rfm_agg[rfm_agg['RfmCat']==i[0]]['counts'])[0]-500*list(rfm_agg[rfm_agg['RfmCat']==i[0]]['counts'])[0])\nNet_Profit\n\n[-5469.6,\n 26201.6,\n 35668.4,\n 5086.200000000001,\n 7967.4,\n -6388.200000000001,\n 1688.0,\n 3746.0,\n -6508.0,\n -4445.0,\n 3158.000000000001,\n 5216.0,\n -5038.0,\n -2975.0,\n -1030.0,\n 5382.6,\n 6617.400000000001,\n 465.0,\n 1702.8000000000002,\n 2869.8,\n 1987.8000000000002]\n\n\n\ntotal=[]\nfor i in range(len(t)):\n    t[i].append(Net_Profit[i])\n    total.append(t[i])\nx=pd.DataFrame(total,columns=[\"From\",\"To\",\"Profit\"])\nx\n\n\n\n\n\n  \n    \n      \n      From\n      To\n      Profit\n    \n  \n  \n    \n      0\n      Loyal Customers\n      Champions\n      -5469.6\n    \n    \n      1\n      Recent Customers\n      Champions\n      26201.6\n    \n    \n      2\n      Recent Customers\n      Loyal Customers\n      35668.4\n    \n    \n      3\n      Promising\n      Champions\n      5086.2\n    \n    \n      4\n      Promising\n      Loyal Customers\n      7967.4\n    \n    \n      5\n      Promising\n      Recent Customers\n      -6388.2\n    \n    \n      6\n      Customers Needing Attention\n      Champions\n      1688.0\n    \n    \n      7\n      Customers Needing Attention\n      Loyal Customers\n      3746.0\n    \n    \n      8\n      Customers Needing Attention\n      Recent Customers\n      -6508.0\n    \n    \n      9\n      Customers Needing Attention\n      Promising\n      -4445.0\n    \n    \n      10\n      Hibernating\n      Champions\n      3158.0\n    \n    \n      11\n      Hibernating\n      Loyal Customers\n      5216.0\n    \n    \n      12\n      Hibernating\n      Recent Customers\n      -5038.0\n    \n    \n      13\n      Hibernating\n      Promising\n      -2975.0\n    \n    \n      14\n      Hibernating\n      Customers Needing Attention\n      -1030.0\n    \n    \n      15\n      Lost\n      Champions\n      5382.6\n    \n    \n      16\n      Lost\n      Loyal Customers\n      6617.4\n    \n    \n      17\n      Lost\n      Recent Customers\n      465.0\n    \n    \n      18\n      Lost\n      Promising\n      1702.8\n    \n    \n      19\n      Lost\n      Customers Needing Attention\n      2869.8\n    \n    \n      20\n      Lost\n      Hibernating\n      1987.8\n    \n  \n\n\n\n\n\ndef even_number_background(cell_value):\n    highlight = 'background-color: #7FFFD4;' \n    \n    default = 'background-color: #FA8072;'  \n    if type(cell_value) in [float]:  \n        if cell_value > 0:     \n            return highlight  \n        else:\n            \n            return default\nx.style.applymap(even_number_background)\n\n\n\n\n  \n    \n       \n      From\n      To\n      Profit\n    \n  \n  \n    \n      0\n      Loyal Customers\n      Champions\n      -5469.600000\n    \n    \n      1\n      Recent Customers\n      Champions\n      26201.600000\n    \n    \n      2\n      Recent Customers\n      Loyal Customers\n      35668.400000\n    \n    \n      3\n      Promising\n      Champions\n      5086.200000\n    \n    \n      4\n      Promising\n      Loyal Customers\n      7967.400000\n    \n    \n      5\n      Promising\n      Recent Customers\n      -6388.200000\n    \n    \n      6\n      Customers Needing Attention\n      Champions\n      1688.000000\n    \n    \n      7\n      Customers Needing Attention\n      Loyal Customers\n      3746.000000\n    \n    \n      8\n      Customers Needing Attention\n      Recent Customers\n      -6508.000000\n    \n    \n      9\n      Customers Needing Attention\n      Promising\n      -4445.000000\n    \n    \n      10\n      Hibernating\n      Champions\n      3158.000000\n    \n    \n      11\n      Hibernating\n      Loyal Customers\n      5216.000000\n    \n    \n      12\n      Hibernating\n      Recent Customers\n      -5038.000000\n    \n    \n      13\n      Hibernating\n      Promising\n      -2975.000000\n    \n    \n      14\n      Hibernating\n      Customers Needing Attention\n      -1030.000000\n    \n    \n      15\n      Lost\n      Champions\n      5382.600000\n    \n    \n      16\n      Lost\n      Loyal Customers\n      6617.400000\n    \n    \n      17\n      Lost\n      Recent Customers\n      465.000000\n    \n    \n      18\n      Lost\n      Promising\n      1702.800000\n    \n    \n      19\n      Lost\n      Customers Needing Attention\n      2869.800000\n    \n    \n      20\n      Lost\n      Hibernating\n      1987.800000\n    \n  \n\n\n\n\nProfit=[]\nLoss=[]\nfor i in range(len(t)):\n    if Net_Profit[i]>0:\n        #t[i].append(Net_Profit[i])\n        Profit.append(t[i])\n    else:\n        #t[i].append(Net_Profit[i])\n        Loss.append(t[i])\n\n\nprofit=pd.DataFrame(Profit,columns=[\"From\",\"To\",\"Profit\"])\nprofit\n\n\n\n\n\n  \n    \n      \n      From\n      To\n      Profit\n    \n  \n  \n    \n      0\n      Recent Customers\n      Champions\n      26201.6\n    \n    \n      1\n      Recent Customers\n      Loyal Customers\n      35668.4\n    \n    \n      2\n      Promising\n      Champions\n      5086.2\n    \n    \n      3\n      Promising\n      Loyal Customers\n      7967.4\n    \n    \n      4\n      Customers Needing Attention\n      Champions\n      1688.0\n    \n    \n      5\n      Customers Needing Attention\n      Loyal Customers\n      3746.0\n    \n    \n      6\n      Hibernating\n      Champions\n      3158.0\n    \n    \n      7\n      Hibernating\n      Loyal Customers\n      5216.0\n    \n    \n      8\n      Lost\n      Champions\n      5382.6\n    \n    \n      9\n      Lost\n      Loyal Customers\n      6617.4\n    \n    \n      10\n      Lost\n      Recent Customers\n      465.0\n    \n    \n      11\n      Lost\n      Promising\n      1702.8\n    \n    \n      12\n      Lost\n      Customers Needing Attention\n      2869.8\n    \n    \n      13\n      Lost\n      Hibernating\n      1987.8\n    \n  \n\n\n\n\n\nloss=pd.DataFrame(Loss,columns=[\"From\",\"To\",\"Profit\"])\nloss\n\n\n\n\n\n  \n    \n      \n      From\n      To\n      Profit\n    \n  \n  \n    \n      0\n      Loyal Customers\n      Champions\n      -5469.6\n    \n    \n      1\n      Promising\n      Recent Customers\n      -6388.2\n    \n    \n      2\n      Customers Needing Attention\n      Recent Customers\n      -6508.0\n    \n    \n      3\n      Customers Needing Attention\n      Promising\n      -4445.0\n    \n    \n      4\n      Hibernating\n      Recent Customers\n      -5038.0\n    \n    \n      5\n      Hibernating\n      Promising\n      -2975.0\n    \n    \n      6\n      Hibernating\n      Customers Needing Attention\n      -1030.0"
  }
]